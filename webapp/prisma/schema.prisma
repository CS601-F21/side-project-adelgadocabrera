generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  gist        String
  author      User?        @relation(fields: [authorId], references: [id])
  authorId    Int?
  isOpen      Boolean      @default(true)
  likes       Int
  views       Int
  badges      Badge[]
  codeReviews CodeReview[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map(name: "email_verified")
  image         String?
  quote         String?
  about         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  isStudent     Boolean?
  isWorker      Boolean?
  company       String?
  studentYears  Int?
  workYears     Int?
  posts         Post[]
  badges        Badge[]
  CodeReview    CodeReview[]
  comments      Comment[]

  @@map("users")
}

model CodeReview {
  id        Int       @id @default(autoincrement())
  authorId  Int?
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  likes     Int
  postId    Int
  author    User?     @relation(fields: [authorId], references: [id])
  Post      Post      @relation(fields: [postId], references: [id])
  comments  Comment[]

  @@map("codereviews")
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  likes        Int
  authorId     Int
  codeReviewId Int
  author       User       @relation(fields: [authorId], references: [id])
  codeReview   CodeReview @relation(fields: [codeReviewId], references: [id])

  @@map("comments")
}

model Badge {
  id     Int    @id @default(autoincrement())
  name   String
  years  Int?
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
  Post   Post?  @relation(fields: [postId], references: [id])
  postId Int?

  @@map("badges")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
