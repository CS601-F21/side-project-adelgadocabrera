generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  gist      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  isOpen    Boolean  @default(true)
  likes     Int
  views     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String
  email        String       @unique
  quote        String
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  isStudent    Boolean
  isWorker     Boolean
  company      String
  studentYears Int
  workYears    Int
  posts        Post[]
  badges       Badge[]
  CodeReview   CodeReview[]
  comments     Comment[]

  @@map("users")
}

model CodeReview {
  id        Int       @id @default(autoincrement())
  authorId  Int?
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  likes     Int
  postId    Int
  author    User?     @relation(fields: [authorId], references: [id])
  comments  Comment[]

  @@map("codereviews")
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  likes        Int
  authorId     Int
  codeReviewId Int
  author       User       @relation(fields: [authorId], references: [id])
  codeReview   CodeReview @relation(fields: [codeReviewId], references: [id])

  @@map("comments")
}

model Badge {
  id     Int    @id @default(autoincrement())
  name   String
  years  Int?
  postId Int?
  userId Int?
  User   User?  @relation(fields: [userId], references: [id])

  @@map("badges")
}
